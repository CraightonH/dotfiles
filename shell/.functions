#!/bin/bash

# check shell startup time
timeshell() {
  shell=${1-$SHELL}
  for i in $(seq 1 5); do /usr/bin/time $shell -i -c exit; done
}

# get epoch time
epoch() {
  command awk -- 'BEGIN {srand(); print srand()}'
}

# convert epoch time to date time
epoch_to_date_time() {
  if command date -d @0 >/dev/null 2>&1; then
    command date -d @"${1:-0}"
  else
    command date -r "${1:-0}"
  fi
}

# check if file ends with a new line
file_closes_with_newline() {
  test "$(command tail -c 1 -- "${1-}" | command wc -l)" -eq '0' &&
    return 1
}

# Show all CNs and SANs in the cert for a domain
getcertnames() {
	if [ -z "${1}" ]; then
		echo "ERROR: No domain specified.";
		return 1;
	fi;

	local domain="${1}";
	echo "Testing ${domain}…";
	echo ""; # newline

	local tmp=$(echo -e "GET / HTTP/1.0\nEOT" \
		| openssl s_client -connect "${domain}:443" -servername "${domain}" 2>&1);

	if [[ "${tmp}" = *"-----BEGIN CERTIFICATE-----"* ]]; then
		local certText=$(echo "${tmp}" \
			| openssl x509 -text -certopt "no_aux, no_header, no_issuer, no_pubkey, \
			no_serial, no_sigdump, no_signame, no_validity, no_version");
		echo "Common Name:";
		echo ""; # newline
		echo "${certText}" | grep "Subject:" | sed -e "s/^.*CN=//" | sed -e "s/\/emailAddress=.*//";
		echo ""; # newline
		echo "Subject Alternative Name(s):";
		echo ""; # newline
		echo "${certText}" | grep -A 1 "Subject Alternative Name:" \
			| sed -e "2s/DNS://g" -e "s/ //g" | tr "," "\n" | tail -n +2;
		return 0;
	else
		echo "ERROR: Certificate not found.";
		return 1;
	fi;
}

# Reset ↑ and ↓ - don't use marlonrichert/zsh-autocomplete
() {
   local -a prefix=( '\e'{\[,O} )
   local -a up=( ${^prefix}A ) down=( ${^prefix}B )
   local key=
   for key in $up[@]; do
      bindkey "$key" up-line-or-history
   done
   for key in $down[@]; do
      bindkey "$key" down-line-or-history
   done
}

kgip () {
  pods=$(kubectl get pods -A -o custom-columns=NAME:.metadata.name,NAMESPACE:.metadata.namespace --no-headers=true --field-selector status.podIP="$1")
  if [ -z "$pods" ]
  then
    services=$(kubectl get services -A -o json | jq -r --arg ip "$1" '.items[] | select(.spec.clusterIP==$ip) | "\(.metadata.name) \(.metadata.namespace)"')
    if [ -n "$services" ]
    then
      echo "$1 belongs to the following service and namespace:"
      echo "$services"
    else
      echo "No pods or services found with IP $1"
    fi
  else
    echo "$1 belongs to the following pod and namespace:"
    echo "$pods"
  fi
}

swap_and_push() {
  local image=$1
  if [[ -z $image ]]; then
    echo "Usage: swap_and_push <image>"
    return 1
  fi
  echo "Pulling image: $image"
  docker pull $image
  # Extract repository, name and tag
  local repository=$(echo $image | awk -F'/' '{OFS="/"; $NF=""; print}' | sed 's/\/$//')
  local name_and_tag=$(echo $image | awk -F'/' '{print $NF}')
  local name=$(echo $name_and_tag | awk -F':' '{print $1}')
  local tag=$(echo $name_and_tag | awk -F':' '{print $2}')
  if [[ -z $tag ]]; then
    tag="latest"
  fi
  echo "Original repository: $repository"
  # Swap lv and slc in the tag
  local new_repository=${repository//lv/temp}
  new_repository=${new_repository//slc/lv}
  new_repository=${new_repository//temp/slc}
  echo "New repository: $new_repository"
  local new_image="$new_repository/$name:$tag"
  echo "Retagging image: $new_image"
  docker tag $image $new_image
  echo "Pushing image: $new_image"
  docker push $new_image
  echo "Operation completed."
}
 